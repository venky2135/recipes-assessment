package com.securin.recipes.util;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.securin.recipes.entity.Recipe;
import com.securin.recipes.repository.RecipeRepository;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

import java.io.InputStream;
import java.util.List;

@Component
@RequiredArgsConstructor
public class RecipeDataLoader {

    private final RecipeRepository repo;
    private final ObjectMapper mapper = new ObjectMapper();

    @PostConstruct
    public void loadData() {
        if (repo.count() > 0) {
            return; // already seeded
        }

        try (InputStream is = getClass().getResourceAsStream("/data/US_recipes.json")) {
            if (is == null) {
                System.err.println("⚠ JSON file not found: /data/US_recipes.json");
                return;
            }

            // read JSON tree so we can clean values
            JsonNode root = mapper.readTree(is);

            // replace NaN with null
            cleanNaN(root);

            // convert cleaned tree to list of recipes
            List<Recipe> recipes = mapper.convertValue(root, new TypeReference<List<Recipe>>() {});
            repo.saveAll(recipes);

            System.out.println("✅ Seeded " + recipes.size() + " recipes.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void cleanNaN(JsonNode node) {
        if (node.isObject()) {
            node.fields().forEachRemaining(entry -> {
                if (entry.getValue().isTextual() && entry.getValue().asText().equalsIgnoreCase("NaN")) {
                    ((com.fasterxml.jackson.databind.node.ObjectNode) node).putNull(entry.getKey());
                } else if (entry.getValue().isNumber() && Double.isNaN(entry.getValue().asDouble())) {
                    ((com.fasterxml.jackson.databind.node.ObjectNode) node).putNull(entry.getKey());
                } else {
                    cleanNaN(entry.getValue());
                }
            });
        } else if (node.isArray()) {
            for (JsonNode child : node) {
                cleanNaN(child);
            }
        }
    }
}
