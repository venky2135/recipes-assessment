package com.securin.recipes.util;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.json.JsonReadFeature;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.securin.recipes.entity.Recipe;
import com.securin.recipes.repository.RecipeRepository;
import org.springframework.boot.CommandLineRunner;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Component;

import java.nio.charset.StandardCharsets;
import java.util.Collections;
import java.util.List;

@Component
public class RecipeDataLoader implements CommandLineRunner {

    private final RecipeRepository recipeRepository;

    public RecipeDataLoader(RecipeRepository recipeRepository) {
        this.recipeRepository = recipeRepository;
    }

    @Override
    public void run(String... args) throws Exception {
        if (recipeRepository.count() > 0) {
            System.out.println("ℹ️ Recipes already present, skipping seed.");
            return;
        }

        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS.mappedFeature(), true);

        // ✅ load from classpath resource
        ClassPathResource resource = new ClassPathResource("data/US_recipes.json");
        if (!resource.exists()) {
            System.err.println("❌ Could not find US_recipes.json in classpath under /data/");
            return;
        }

        String rawJson = new String(resource.getInputStream().readAllBytes(), StandardCharsets.UTF_8);

        // Replace NaN → null for DB safety
        rawJson = rawJson.replaceAll("\\bNaN\\b", "null");

        List<Recipe> recipes;

        // ✅ Handle both [ {...}, {...} ] and { "recipes": [ {...}, {...} ] }
        JsonNode root = mapper.readTree(rawJson);
        if (root.isArray()) {
            recipes = mapper.readValue(rawJson, new TypeReference<List<Recipe>>() {});
        } else if (root.has("recipes") && root.get("recipes").isArray()) {
            recipes = mapper.readValue(
                    mapper.writeValueAsString(root.get("recipes")),
                    new TypeReference<List<Recipe>>() {}
            );
        } else {
            System.err.println("❌ Unexpected JSON format in US_recipes.json. Expected array or { \"recipes\": [...] }");
            recipes = Collections.emptyList();
        }

        if (!recipes.isEmpty()) {
            recipeRepository.saveAll(recipes);
            System.out.println("✅ Seeded " + recipes.size() + " recipes from US_recipes.json.");
        } else {
            System.out.println("⚠️ No recipes found to seed.");
        }
    }
}
