package com.securin.recipes.util;

import com.fasterxml.jackson.core.json.JsonReadFeature;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.securin.recipes.entity.Recipe;
import com.securin.recipes.repository.RecipeRepository;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

import java.io.InputStream;
import java.util.List;

@Component
@RequiredArgsConstructor
public class RecipeDataLoader {

    private final RecipeRepository repo;

    // Allow NaN and other non-numeric numbers
    private final ObjectMapper mapper = new ObjectMapper()
            .enable(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS.mappedFeature());

    @PostConstruct
    private void loadData() {
        try {
            ObjectMapper mapper = new ObjectMapper();
            mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

            File file = new ClassPathResource("data/US_recipes.json").getFile();
            JsonNode root = mapper.readTree(file);

            List<Recipe> recipes = new ArrayList<>();

            if (root.isArray()) {
                // ✅ Case 1: JSON is an array [ {...}, {...} ]
                recipes = mapper.convertValue(root, new TypeReference<List<Recipe>>() {});
            } else if (root.isObject()) {
                // ✅ Case 2: JSON is an object { "0": {...}, "1": {...} }
                Map<String, Recipe> recipeMap = mapper.convertValue(root, new TypeReference<Map<String, Recipe>>() {});
                recipes = new ArrayList<>(recipeMap.values());
            }

            // Save only if DB is empty
            if (repo.count() == 0 && !recipes.isEmpty()) {
                repo.saveAll(recipes);
                System.out.println("✅ Loaded " + recipes.size() + " recipes into DB.");
            } else {
                System.out.println("ℹ️ Recipes already exist in DB. Skipping load.");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    private void cleanNaN(JsonNode node) {
        if (node.isObject()) {
            node.fields().forEachRemaining(entry -> {
                if (entry.getValue().isTextual() && entry.getValue().asText().equalsIgnoreCase("NaN")) {
                    ((com.fasterxml.jackson.databind.node.ObjectNode) node).putNull(entry.getKey());
                } else if (entry.getValue().isNumber() && Double.isNaN(entry.getValue().asDouble())) {
                    ((com.fasterxml.jackson.databind.node.ObjectNode) node).putNull(entry.getKey());
                } else {
                    cleanNaN(entry.getValue());
                }
            });
        } else if (node.isArray()) {
            for (JsonNode child : node) {
                cleanNaN(child);
            }
        }
    }
}
