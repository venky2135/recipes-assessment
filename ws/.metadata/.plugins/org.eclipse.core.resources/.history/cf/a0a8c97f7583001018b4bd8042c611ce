package com.securin.recipes.loader;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.json.JsonReadFeature;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.securin.recipes.entity.Recipe;
import com.securin.recipes.repository;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

import java.io.InputStream;
import java.util.List;

@Component
@RequiredArgsConstructor
public class RecipeDataLoader {

    private final RecipeRepository recipeRepository;

    @PostConstruct
    public void load() {
        if (recipeRepository.count() > 0) {
            return; // already loaded
        }

        try (InputStream is = getClass().getResourceAsStream("/recipes.json")) {
            if (is == null) {
                throw new RuntimeException("recipes.json not found in resources");
            }

            ObjectMapper mapper = new ObjectMapper()
                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)
                    .configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true)
                    .configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, true)
                    .configure(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS.mappedFeature(), true);

            List<Recipe> recipes = mapper.readValue(
                    is,
                    mapper.getTypeFactory().constructCollectionType(List.class, Recipe.class)
            );

            recipeRepository.saveAll(recipes);

            System.out.println("âœ… Loaded " + recipes.size() + " recipes.");
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException("Failed loading recipes.json", e);
        }
    }
}
