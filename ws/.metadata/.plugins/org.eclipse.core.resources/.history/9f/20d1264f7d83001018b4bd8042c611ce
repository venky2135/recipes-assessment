package com.securin.recipes.util;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.json.JsonReadFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.securin.recipes.entity.Recipe;
import com.securin.recipes.repository.RecipeRepository;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;

@Component
public class RecipeDataLoader implements CommandLineRunner {

    private final RecipeRepository recipeRepository;

    public RecipeDataLoader(RecipeRepository recipeRepository) {
        this.recipeRepository = recipeRepository;
    }

    @Override
    public void run(String... args) throws Exception {
        if (recipeRepository.count() == 0) {
            ObjectMapper mapper = new ObjectMapper();
            // Allow non-standard numbers like NaN, Infinity
            mapper.configure(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS.mappedFeature(), true);

            // Read JSON as string
            String rawJson = Files.readString(Paths.get("src/main/resources/recipes.json"));
            // Replace NaN with null (DB safe)
            rawJson = rawJson.replaceAll("\\bNaN\\b", "null");

            // Deserialize into list of recipes
            List<Recipe> recipes = mapper.readValue(rawJson, new TypeReference<List<Recipe>>() {});
            recipeRepository.saveAll(recipes);

            System.out.println("✅ Seeded " + recipes.size() + " recipes.");
        } else {
            System.out.println("ℹ️ Recipes already present, skipping seed.");
        }
    }
}
