package com.securin.recipes.util;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.json.JsonReadFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.securin.recipes.entity.Recipe;
import com.securin.recipes.repository.RecipeRepository;
import org.springframework.boot.CommandLineRunner;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class RecipeDataLoader implements CommandLineRunner {

    private final RecipeRepository recipeRepository;

    public RecipeDataLoader(RecipeRepository recipeRepository) {
        this.recipeRepository = recipeRepository;
    }

    @Override
    public void run(String... args) throws Exception {
        if (recipeRepository.count() == 0) {
            ObjectMapper mapper = new ObjectMapper();
            mapper.configure(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS.mappedFeature(), true);

            // ✅ load from classpath resource
            ClassPathResource resource = new ClassPathResource("data/US_recipes.json");
            String rawJson = new String(resource.getInputStream().readAllBytes());

            // replace NaN → null for DB safety
            rawJson = rawJson.replaceAll("\\bNaN\\b", "null");

            List<Recipe> recipes = mapper.readValue(rawJson, new TypeReference<List<Recipe>>() {});
            recipeRepository.saveAll(recipes);

            System.out.println("✅ Seeded " + recipes.size() + " recipes from US_recipes.json.");
        } else {
            System.out.println("ℹ️ Recipes already present, skipping seed.");
        }
    }
}
