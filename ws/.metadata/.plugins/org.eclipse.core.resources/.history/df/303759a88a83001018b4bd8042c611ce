package com.securin.recipes.service;

import com.securin.recipes.dto.RecipeDto;
import com.securin.recipes.dto.SearchRequest;
import com.securin.recipes.entity.Recipe;
import com.securin.recipes.repository.RecipeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.*;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Path;
import java.util.ArrayList;
import java.util.List;

@Service
public class RecipeService {

    @Autowired
    private RecipeRepository repo;

    // Paginated listing
    public Page<RecipeDto> list(int page, int size) {
        Pageable pageable = PageRequest.of(page, size, Sort.by("id").descending());
        return repo.findAll(pageable).map(RecipeDto::fromEntity);
    }

    // Search with multiple filters using Specification
    public List<RecipeDto> search(SearchRequest request, int size) {
        Pageable pageable = PageRequest.of(0, size);

        Specification<Recipe> spec = (root, query, cb) -> {
            List<Predicate> predicates = new ArrayList<>();

            if (request.getTitle() != null && !request.getTitle().trim().isEmpty()) {
                predicates.add(cb.like(cb.lower(root.get("title")), "%" + request.getTitle().toLowerCase().trim() + "%"));
            }
            if (request.getCuisine() != null && !request.getCuisine().trim().isEmpty()) {
                predicates.add(cb.equal(root.get("cuisine"), request.getCuisine().trim()));
            }
            if (request.getRating() != null && !request.getRating().trim().isEmpty()) {
                addNumericFilter(cb, predicates, root.get("rating"), request.getRating());
            }
            if (request.getCalories() != null && !request.getCalories().trim().isEmpty()) {
                // Calories filtering skipped â€” complex JSON filtering may be needed
            }
            if (request.getTotalTime() != null && !request.getTotalTime().trim().isEmpty()) {
                addNumericFilter(cb, predicates, root.get("totalTime"), request.getTotalTime());
            }

            return cb.and(predicates.toArray(new Predicate[0]));
        };

        return repo.findAll(spec, pageable).getContent().stream()
                   .map(RecipeDto::fromEntity)
                   .toList();
    }

    // Helper to add numeric filter predicates based on operator prefix
    private void addNumericFilter(CriteriaBuilder cb,
                                  List<Predicate> predicates,
                                  Path<Number> path,
                                  String filterStr) {
        filterStr = filterStr.trim();
        try {
            Path<Double> doublePath = path.as(Double.class);
            if (filterStr.startsWith(">=")) {
                Double val = Double.valueOf(filterStr.substring(2).trim());
                predicates.add(cb.greaterThanOrEqualTo(doublePath, val));
            } else if (filterStr.startsWith("<=")) {
                Double val = Double.valueOf(filterStr.substring(2).trim());
                predicates.add(cb.lessThanOrEqualTo(doublePath, val));
            } else if (filterStr.startsWith(">")) {
                Double val = Double.valueOf(filterStr.substring(1).trim());
                predicates.add(cb.greaterThan(doublePath, val));
            } else if (filterStr.startsWith("<")) {
                Double val = Double.valueOf(filterStr.substring(1).trim());
                predicates.add(cb.lessThan(doublePath, val));
            } else if (filterStr.startsWith("=")) {
                Double val = Double.valueOf(filterStr.substring(1).trim());
                predicates.add(cb.equal(doublePath, val));
            } else {
                // No operator, assume equals
                Double val = Double.valueOf(filterStr);
                predicates.add(cb.equal(doublePath, val));
            }
        } catch (NumberFormatException e) {
            // Ignore invalid number format input
        }
    }
}
