package com.securin.recipes.loader;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.securin.recipes.entity.Recipe;
import com.securin.recipes.repository.RecipeRepository;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.io.InputStream;
import java.util.*;

@Slf4j
@Component
@RequiredArgsConstructor
public class RecipeDataLoader {

  private final RecipeRepository repo;
  private final ObjectMapper mapper;

  @Value("${app.loader.enabled:true}")
  private boolean enabled;

  @Value("${app.data.file:classpath:data/US_recipes.json}")
  private Resource dataFile;

  @PostConstruct
  @Transactional
  public void load() {
    try {
      if (!enabled) { log.info("Loader disabled."); return; }
      if (repo.count() > 0) { log.info("Recipes already loaded: {}", repo.count()); return; }
      try (InputStream in = dataFile.getInputStream()) {
        Map<String, Map<String, Object>> raw = mapper.readValue(in, new TypeReference<>() {});
        List<Recipe> batch = new ArrayList<>(raw.size());
        for (Map<String, Object> r : raw.values()) {
          Recipe recipe = Recipe.builder()
            .cuisine(str(r.get("cuisine")))
            .title(str(r.get("title")))
            .rating(numD(r.get("rating")))
            .prepTime(numI(r.get("prep_time")))
            .cookTime(numI(r.get("cook_time")))
            .totalTime(numI(r.get("total_time")))
            .description(str(r.get("description")))
            .nutrients(safeMap(r.get("nutrients")))
            .serves(str(r.get("serves")))
            .build();
          batch.add(recipe);
        }
        repo.saveAll(batch);
        log.info("Loaded {} recipes.", batch.size());
      }
    } catch (Exception e) {
      log.error("Failed loading data", e);
    }
  }

  private static String str(Object o){ return (o==null||"NaN".equals(o.toString()))?null:String.valueOf(o); }
  private static Integer numI(Object o){
    try{ if(o==null) return null; String s=o.toString(); if("NaN".equalsIgnoreCase(s)) return null; return (int)Math.round(Double.parseDouble(s)); } catch(Exception e){ return null; }
  }
  private static Double numD(Object o){
    try{ if(o==null) return null; String s=o.toString(); if("NaN".equalsIgnoreCase(s)) return null; return Double.parseDouble(s);} catch(Exception e){ return null; }
  }
  @SuppressWarnings("unchecked")
  private static Map<String,Object> safeMap(Object o){ return (o instanceof Map<?,?> m) ? new LinkedHashMap<>((Map<String,Object>) m) : null; }
}
