package com.securin.recipes.loader;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.json.JsonReadFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.securin.recipes.entity.Recipe;
import com.securin.recipes.repository.RecipeRepository;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

import java.io.InputStream;
import java.util.List;

@Component
@RequiredArgsConstructor
public class RecipeDataLoader {

    private final RecipeRepository recipeRepository;

    @PostConstruct
    public void load() {
        try (InputStream is = getClass().getResourceAsStream("/data/US_recipes.json")) {
            if (is == null) {
                throw new RuntimeException("Could not find US_recipes.json in resources/data");
            }

            ObjectMapper mapper = new ObjectMapper();
            // ✅ Allow NaN, Infinity, etc.
            mapper.configure(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS.mappedFeature(), true);

            List<Recipe> recipes = mapper.readValue(is, new TypeReference<>() {});
            recipeRepository.saveAll(recipes);
            System.out.println("✅ Loaded " + recipes.size() + " recipes into DB");
        } catch (Exception e) {
            System.err.println("❌ Failed loading data: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
