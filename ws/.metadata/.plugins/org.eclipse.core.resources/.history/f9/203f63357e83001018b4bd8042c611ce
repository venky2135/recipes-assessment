package com.securin.recipes.util;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.securin.recipes.entity.Recipe;
import com.securin.recipes.repository.RecipeRepository;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Component;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

@Slf4j
@Component
@RequiredArgsConstructor
public class RecipeDataLoader {

    private final RecipeRepository repo;
    private final ObjectMapper mapper = new ObjectMapper();

    @PostConstruct
    public void seed() {
        try {
            if (repo.count() > 0) {
                log.info("✅ Recipes already exist in DB, skipping seeding.");
                return;
            }

            ClassPathResource resource = new ClassPathResource("data/US_recipes.json");
            try (InputStream is = resource.getInputStream()) {
                JsonNode root = mapper.readTree(is);
                List<Recipe> recipes = new ArrayList<>();

                if (root.isArray()) {
                    // Case 1: JSON array
                    recipes = mapper.convertValue(root, new TypeReference<List<Recipe>>() {});
                } else if (root.has("recipes") && root.get("recipes").isArray()) {
                    // Case 2: { "recipes": [ ... ] }
                    recipes = mapper.convertValue(root.get("recipes"), new TypeReference<List<Recipe>>() {});
                } else if (root.isObject()) {
                    // Case 3: { "0": {..}, "1": {..}, ... }
                    Iterator<JsonNode> elements = root.elements();
                    while (elements.hasNext()) {
                        JsonNode node = elements.next();
                        Recipe recipe = mapper.convertValue(node, Recipe.class);
                        recipes.add(recipe);
                    }
                } else {
                    log.error("❌ Unexpected JSON format in US_recipes.json");
                }

                if (!recipes.isEmpty()) {
                    repo.saveAll(recipes);
                    log.info("✅ Seeded {} recipes into DB.", recipes.size());
                } else {
                    log.warn("⚠️ No recipes found to seed.");
                }
            }

        } catch (Exception e) {
            log.error("❌ Failed to seed recipes: {}", e.getMessage(), e);
        }
    }
}
